/* eslint-disable no-new-object */
/* eslint-disable no-new-wrappers */
'use strict'
const assert = require('assert')
const { load } = require('../util')

const testSym = Symbol('test')

// eslint-disable-next-line camelcase
load('valueoperation').then(mod => {
  assert.strictEqual(mod.toBool(true), true)
  assert.strictEqual(mod.toBool(1), true)
  assert.strictEqual(mod.toBool(-1), true)
  assert.strictEqual(mod.toBool('true'), true)
  assert.strictEqual(mod.toBool('false'), true)
  assert.strictEqual(mod.toBool({}), true)
  assert.strictEqual(mod.toBool([]), true)
  assert.strictEqual(mod.toBool(testSym), true)
  assert.strictEqual(mod.toBool(false), false)
  assert.strictEqual(mod.toBool(undefined), false)
  assert.strictEqual(mod.toBool(null), false)
  assert.strictEqual(mod.toBool(0), false)
  assert.strictEqual(mod.toBool(Number.NaN), false)
  assert.strictEqual(mod.toBool(''), false)

  assert.strictEqual(mod.toNumber(0), 0)
  assert.strictEqual(mod.toNumber(1), 1)
  assert.strictEqual(mod.toNumber(1.1), 1.1)
  assert.strictEqual(mod.toNumber(-1), -1)
  assert.strictEqual(mod.toNumber('0'), 0)
  assert.strictEqual(mod.toNumber('1'), 1)
  assert.strictEqual(mod.toNumber('1.1'), 1.1)
  assert.strictEqual(mod.toNumber([]), 0)
  assert.strictEqual(mod.toNumber(false), 0)
  assert.strictEqual(mod.toNumber(null), 0)
  assert.ok(Number.isNaN(mod.toNumber(Number.NaN)))
  assert.ok(Number.isNaN(mod.toNumber({})))
  assert.ok(Number.isNaN(mod.toNumber(undefined)))
  assert.throws(() => { mod.toNumber(testSym) }, TypeError)

  assert.deepStrictEqual(mod.toObject({}), {})
  assert.deepStrictEqual(mod.toObject({ test: 1 }), { test: 1 })
  assert.deepStrictEqual(mod.toObject([]), [])
  assert.deepStrictEqual(mod.toObject([1, 2, 3]), [1, 2, 3])
  assert.deepStrictEqual(mod.toObject(false), new Boolean(false))
  assert.deepStrictEqual(mod.toObject(true), new Boolean(true))
  assert.deepStrictEqual(mod.toObject(''), new String(''))
  assert.deepStrictEqual(mod.toObject(0), new Number(0))
  assert.deepStrictEqual(mod.toObject(Number.NaN), new Number(Number.NaN))
  assert.deepStrictEqual(mod.toObject(testSym), new Object(testSym))

  assert.notDeepStrictEqual(mod.toObject(false), false)
  assert.notDeepStrictEqual(mod.toObject(true), true)
  assert.notDeepStrictEqual(mod.toObject(''), '')
  assert.notDeepStrictEqual(mod.toObject(0), 0)
  assert.ok(!Number.isNaN(mod.toObject(Number.NaN)))

  assert.strictEqual(mod.toString(''), '')
  assert.strictEqual(mod.toString('test'), 'test')
  assert.strictEqual(mod.toString(undefined), 'undefined')
  assert.strictEqual(mod.toString(null), 'null')
  assert.strictEqual(mod.toString(false), 'false')
  assert.strictEqual(mod.toString(true), 'true')
  assert.strictEqual(mod.toString(0), '0')
  assert.strictEqual(mod.toString(1.1), '1.1')
  assert.strictEqual(mod.toString(Number.NaN), 'NaN')
  assert.strictEqual(mod.toString({}), '[object Object]')
  assert.strictEqual(mod.toString({ toString: () => 'test' }), 'test')
  assert.strictEqual(mod.toString([]), '')
  assert.strictEqual(mod.toString([1, 2, 3]), '1,2,3')
  assert.throws(() => { mod.toString(testSym) }, TypeError)
})
