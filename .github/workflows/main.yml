name: Build

on:
  push:
    paths:
    - '**.ts'
    - '**.js'
    - '**.c'
    - '**.cc'
    - '**.cpp'
    - '**.h'
    - '!packages/bench/**'
    - '!script/**'
    - '!example/**'
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    env:
      WASI_VERSION: '19'
      WASI_VERSION_FULL: '19.0'
      WASI_SDK_PATH: './wasi-sdk'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v3
    - name: Install Ninja
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build
    - uses: mymindstorm/setup-emsdk@v11
      with:
        version: '3.1.29'
        # no-cache: true
        actions-cache-folder: 'emsdk-cache'

    - name: Cache wasi-sdk
      id: cache-wasi-sdk
      uses: actions/cache@v3
      with:
        path: ${{ env.WASI_SDK_PATH }}
        key: ${{ runner.os }}-${{ env.WASI_VERSION_FULL }}

    - name: Install wasi-sdk
      if: ${{ steps.cache-wasi-sdk.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_VERSION}/wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz
        tar zxvf wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz
        mv wasi-sdk-${WASI_VERSION_FULL} $WASI_SDK_PATH

    - uses: actions/setup-node@v3
      with:
        node-version: '16.15.0'
        registry-url: 'https://registry.npmjs.org'
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Linux build
      if: ${{ matrix.os == 'ubuntu-latest' }}
      shell: bash
      run: |
        npm install -g node-gyp
        npm install --legacy-peer-deps
        npm run build --workspaces --if-present
    
    - name: Lint
      run: npm run lint

    - name: Test
      run: |
        npm run rebuild -w packages/test
        npm run test -w packages/test

    - name: Test MEMORY64
      env:
        MEMORY64: '1'
      run: |
        npm run rebuild -w packages/test
        npm run test -w packages/test

    - name: Test WASI
      run: |
        npm run rebuild:w -w packages/test
        npm run test:w -w packages/test

    - name: Publish
      if: ${{ startsWith(github.event.ref, 'refs/tags') && matrix.os == 'ubuntu-latest' }}
      run: |
        node ./script/release.js
        npm publish --ignore-scripts -w packages/runtime -w packages/node -w packages/emnapi -w packages/core

    - name: Create release
      if: ${{ startsWith(github.event.ref, 'refs/tags') }}
      uses: toyobayashi/upload-release-assets@v3.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.after }}
        release_name: ${{ github.event.after }}
        draft: true
        prerelease: false
        assets: ./script/emnapi.zip
